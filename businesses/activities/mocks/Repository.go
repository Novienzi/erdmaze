// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"
	activities "erdmaze/businesses/activities"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx
func (_m *Repository) Find(ctx context.Context) ([]activities.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []activities.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]activities.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, activityId
func (_m *Repository) GetByID(ctx context.Context, activityId int) (activities.Domain, error) {
	ret := _m.Called(ctx, activityId)

	var r0 activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) activities.Domain); ok {
		r0 = rf(ctx, activityId)
	} else {
		r0 = ret.Get(0).(activities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, activityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, activityName
func (_m *Repository) GetByName(ctx context.Context, activityName string) (activities.Domain, error) {
	ret := _m.Called(ctx, activityName)

	var r0 activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) activities.Domain); ok {
		r0 = rf(ctx, activityName)
	} else {
		r0 = ret.Get(0).(activities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, activityName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, ActivitiesDomain
func (_m *Repository) Store(ctx context.Context, ActivitiesDomain *activities.Domain) (activities.Domain, error) {
	ret := _m.Called(ctx, ActivitiesDomain)

	var r0 activities.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *activities.Domain) activities.Domain); ok {
		r0 = rf(ctx, ActivitiesDomain)
	} else {
		r0 = ret.Get(0).(activities.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *activities.Domain) error); ok {
		r1 = rf(ctx, ActivitiesDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
