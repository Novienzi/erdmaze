// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"
	tourismpackages "erdmaze/businesses/tourism_packages"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, page, perpage
func (_m *Repository) Fetch(ctx context.Context, page int, perpage int) ([]tourismpackages.Domain, int, error) {
	ret := _m.Called(ctx, page, perpage)

	var r0 []tourismpackages.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []tourismpackages.Domain); ok {
		r0 = rf(ctx, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tourismpackages.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAll provides a mock function with given fields: ctx, tourismName, locationName, activityName
func (_m *Repository) GetAll(ctx context.Context, tourismName string, locationName string, activityName string) ([]tourismpackages.Domain, error) {
	ret := _m.Called(ctx, tourismName, locationName, activityName)

	var r0 []tourismpackages.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []tourismpackages.Domain); ok {
		r0 = rf(ctx, tourismName, locationName, activityName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tourismpackages.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tourismName, locationName, activityName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, tourismPackagesId
func (_m *Repository) GetByID(ctx context.Context, tourismPackagesId int) (tourismpackages.Domain, error) {
	ret := _m.Called(ctx, tourismPackagesId)

	var r0 tourismpackages.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) tourismpackages.Domain); ok {
		r0 = rf(ctx, tourismPackagesId)
	} else {
		r0 = ret.Get(0).(tourismpackages.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, tourismPackagesId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, tourismPackagesName
func (_m *Repository) GetByName(ctx context.Context, tourismPackagesName string) (tourismpackages.Domain, error) {
	ret := _m.Called(ctx, tourismPackagesName)

	var r0 tourismpackages.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) tourismpackages.Domain); ok {
		r0 = rf(ctx, tourismPackagesName)
	} else {
		r0 = ret.Get(0).(tourismpackages.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tourismPackagesName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, tourismPackagesDomain
func (_m *Repository) Store(ctx context.Context, tourismPackagesDomain *tourismpackages.Domain) (tourismpackages.Domain, error) {
	ret := _m.Called(ctx, tourismPackagesDomain)

	var r0 tourismpackages.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *tourismpackages.Domain) tourismpackages.Domain); ok {
		r0 = rf(ctx, tourismPackagesDomain)
	} else {
		r0 = ret.Get(0).(tourismpackages.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tourismpackages.Domain) error); ok {
		r1 = rf(ctx, tourismPackagesDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
