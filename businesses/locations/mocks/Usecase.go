// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"
	locations "erdmaze/businesses/locations"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, locationDomain
func (_m *Usecase) Delete(ctx context.Context, locationDomain *locations.Domain) (*locations.Domain, error) {
	ret := _m.Called(ctx, locationDomain)

	var r0 *locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *locations.Domain) *locations.Domain); ok {
		r0 = rf(ctx, locationDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*locations.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *locations.Domain) error); ok {
		r1 = rf(ctx, locationDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, page, perpage
func (_m *Usecase) Fetch(ctx context.Context, page int, perpage int) ([]locations.Domain, int, error) {
	ret := _m.Called(ctx, page, perpage)

	var r0 []locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []locations.Domain); ok {
		r0 = rf(ctx, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]locations.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAll provides a mock function with given fields: ctx
func (_m *Usecase) GetAll(ctx context.Context) ([]locations.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []locations.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]locations.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, locationId
func (_m *Usecase) GetByID(ctx context.Context, locationId int) (locations.Domain, error) {
	ret := _m.Called(ctx, locationId)

	var r0 locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) locations.Domain); ok {
		r0 = rf(ctx, locationId)
	} else {
		r0 = ret.Get(0).(locations.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, locationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, locationName
func (_m *Usecase) GetByName(ctx context.Context, locationName string) (locations.Domain, error) {
	ret := _m.Called(ctx, locationName)

	var r0 locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) locations.Domain); ok {
		r0 = rf(ctx, locationName)
	} else {
		r0 = ret.Get(0).(locations.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, locationName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, locationDomain
func (_m *Usecase) Store(ctx context.Context, locationDomain *locations.Domain) (locations.Domain, error) {
	ret := _m.Called(ctx, locationDomain)

	var r0 locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *locations.Domain) locations.Domain); ok {
		r0 = rf(ctx, locationDomain)
	} else {
		r0 = ret.Get(0).(locations.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *locations.Domain) error); ok {
		r1 = rf(ctx, locationDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, locationDomain
func (_m *Usecase) Update(ctx context.Context, locationDomain *locations.Domain) (*locations.Domain, error) {
	ret := _m.Called(ctx, locationDomain)

	var r0 *locations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *locations.Domain) *locations.Domain); ok {
		r0 = rf(ctx, locationDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*locations.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *locations.Domain) error); ok {
		r1 = rf(ctx, locationDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
